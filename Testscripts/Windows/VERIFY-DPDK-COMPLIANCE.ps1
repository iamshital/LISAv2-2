# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License.
param([object] $AllVmData,
	[object] $CurrentTestData)

$SUPER_USER = "root"

function Check-DPDKCompliance {
	Write-LogInfo "DPDK VM details:"
	Write-LogInfo "  RoleName : $($allVMData.RoleName)"
	Write-LogInfo "  Public IP : $($allVMData.PublicIP)"
	Write-LogInfo "  SSH Port : $($allVMData.SSHPort)"
	Write-LogInfo "  Internal IP : $($allVMData.InternalIP)"

	$currentKernelVersion = Run-LinuxCmd -ip $vmData.PublicIP -port $vmData.SSHPort `
			-username $user -password $password -command "uname -r"
	if (Is-DpdkCompatible -KernelVersion $currentKernelVersion -DetectedDistro $global:DetectedDistro) {
		Write-LogInfo "Confirmed Kernel version supported: $currentKernelVersion"
	} else {
		Write-LogWarn "Unsupported Kernel version: $currentKernelVersion or unsupported distro $($global:DetectedDistro)"
		return $global:ResultSkipped
	}
	Provision-VMsForLisa -allVMData $allVMData -installPackagesOnRoleNames "none"

	Write-LogInfo "Generating constants.sh ..."
	$constantsFile = "$LogDir\constants.sh"
	Set-Content -Value "# Generated by Azure Automation." -Path $constantsFile
	Add-Content -Value "vms=$($allVMData.RoleName)" -Path $constantsFile
	Add-Content -Value "client=$($allVMData.InternalIP)" -Path $constantsFile
	Add-Content -Value "server=$($allVMData.InternalIP)" -Path $constantsFile
	foreach ($param in $currentTestData.TestParameters.param) {
		Add-Content -Value "$param" -Path $constantsFile
	}
	Write-LogInfo "constants.sh created successfully..."
	Write-LogInfo (Get-Content -Path $constantsFile)

	$installDPDKCommand = @"
cd /root/
./dpdkSetup.sh 2>&1 > dpdkConsoleLogs.txt
. utils.sh
collect_VM_properties
"@
	Set-Content "$LogDir\StartDpdkSetup.sh" $installDPDKCommand
	Copy-RemoteFiles -uploadTo $allVMData.PublicIP -port $allVMData.SSHPort `
		-files "$constantsFile,$LogDir\StartDpdkSetup.sh" `
		-username $SUPER_USER -password $password -upload

	Run-LinuxCmd -ip $allVMData.PublicIP -port $allVMData.SSHPort `
		-username $SUPER_USER -password $password -command "chmod +x *.sh" | Out-Null
	$testJob = Run-LinuxCmd -ip $allVMData.PublicIP -port $allVMData.SSHPort `
		-username $SUPER_USER -password $password -command "./StartDpdkSetup.sh" `
		-RunInBackground

	while ((Get-Job -Id $testJob).State -eq "Running") {
		$currentStatus = Run-LinuxCmd -ip $allVMData.PublicIP -port $allVMData.SSHPort `
			-username $SUPER_USER -password $password -command "tail -2 dpdkConsoleLogs.txt | head -1"
		Write-LogInfo "Current Test Status: $currentStatus"
		Wait-Time -seconds 20
	}

	$finalStatus = Run-LinuxCmd -ip $allVMData.PublicIP -port $allVMData.SSHPort `
		-username $SUPER_USER -password $password -command "cat /root/state.txt"
	Copy-RemoteFiles -downloadFrom $allVMData.PublicIP -port $allVMData.SSHPort `
		-username $SUPER_USER -password $password -download `
		-downloadTo $LogDir -files "*.csv, *.txt, *.log"

	if ($finalStatus -imatch "TestFailed") {
		Write-LogErr "Test failed. Last known status: $currentStatus."
		$testResult = "FAIL"
	}	elseif ($finalStatus -imatch "TestAborted") {
		Write-LogErr "Test Aborted. Last known status : $currentStatus."
		$testResult = "ABORTED"
	}	elseif ($finalStatus -imatch "TestCompleted") {
		Write-LogInfo "Test Completed."
		Write-LogInfo "DPDK build is Success"
		$testResult = "PASS"
	}	else {
		Write-LogErr "Test execution is not successful, check test logs in VM."
		$testResult = "ABORTED"
	}
	return $testResult
}

$testResult = "Aborted"
try {
	$testResult = Check-DPDKCompliance
} catch {
	$ErrorMessage =  $_.Exception.Message
	$ErrorLine = $_.InvocationInfo.ScriptLineNumber
	Write-LogErr "EXCEPTION: $ErrorMessage at line: $ErrorLine"
	$testResult = "FAIL"
}

Write-LogInfo "Test result: $testResult"
return $testResult
