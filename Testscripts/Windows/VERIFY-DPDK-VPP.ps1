# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License.
# VPP is a software switch implementation, created initially by CISCO and open sourced.
# VPP repo: https://github.com/FDio/vpp.git
param([object] $AllVmData,
		[object] $CurrentTestData)

function Main {
	# Create test result
	$superUser = "root"
	$testResult = $null

	try {
		# Checking VPP DPDK compatibility
		$compatibleDistro = @("REDHAT", "UBUNTU")
		if (!(Is-DpdkCompatible -CompatibleDistro $compatibleDistro -DetectedDistro $global:DetectedDistro)) {
			return $global:ResultSkipped
		}
		$currentKernelVersion = Run-LinuxCmd -ip $vmData.PublicIP -port $vmData.SSHPort `
			-username $user -password $password -command "uname -r"
		if (Is-DpdkCompatible -KernelVersion $currentKernelVersion -DetectedDistro $global:DetectedDistro) {
			Write-LogInfo "Confirmed Kernel version supported: $currentKernelVersion"
		} else {
			Write-LogWarn "Unsupported Kernel version: $currentKernelVersion or unsupported distro $($global:DetectedDistro)"
			return $global:ResultSkipped
		}

		# PROVISION VMS FOR LISA WILL ENABLE ROOT USER AND WILL MAKE ENABLE PASSWORDLESS AUTHENTICATION ACROSS ALL VMS IN SAME HOSTED SERVICE.
		Provision-VMsForLisa -allVMData $allVMData -installPackagesOnRoleNames "none"
		#endregion

		Write-LogInfo "Generating constants.sh ..."
		$constantsFile = "$LogDir\constants.sh"
		Set-Content -Value "#Generated by Azure Automation." -Path $constantsFile
		Add-Content -Value "vms=$($vmData.RoleName)" -Path $constantsFile
		Add-Content -Value "client=$($vmData.InternalIP)" -Path $constantsFile
		Add-Content -Value "server=$($vmData.InternalIP)" -Path $constantsFile

		foreach ($param in $currentTestData.TestParameters.param) {
			Add-Content -Value "$param" -Path $constantsFile
		}

		Write-LogInfo "constants.sh created successfully..."
		Write-LogInfo (Get-Content -Path $constantsFile)
		#endregion

		#region INSTALL CONFIGURE VPP
		$build_test_vpp = @"
cd /root/
./build_test_vpp.sh > vppConsoleLogs.txt 2>&1
. utils.sh
collect_VM_properties
"@
		Set-Content "$LogDir\StartVppSetup.sh" $build_test_vpp
		Copy-RemoteFiles -uploadTo $vmData.PublicIP -port $vmData.SSHPort `
			-files "$constantsFile,$LogDir\StartVppSetup.sh" -username $superUser -password $password -upload

		Run-LinuxCmd -ip $vmData.PublicIP -port $vmData.SSHPort `
			-username $superUser -password $password -command "chmod +x *.sh" | Out-Null
		$testJob = Run-LinuxCmd -ip $vmData.PublicIP -port $vmData.SSHPort `
			-username $superUser -password $password -command "./StartVppSetup.sh" -RunInBackground
		#endregion

		#region MONITOR INSTALL CONFIGURE VPP
		while ((Get-Job -Id $testJob).State -eq "Running") {
			$currentStatus = Run-LinuxCmd -ip $vmData.PublicIP -port $vmData.SSHPort `
				-username $superUser -password $password -command "tail -2 vppConsoleLogs.txt | head -1"
			Write-LogInfo "Current Test Status : $currentStatus"
			Wait-Time -seconds 20
		}
		$ovsStatus = Run-LinuxCmd -ip $vmData.PublicIP -port $vmData.SSHPort `
			-username $superUser -password $password -command "cat /root/state.txt"
		$testResult = Get-TestStatus $ovsStatus

		Copy-RemoteFiles -downloadFrom $vmData.PublicIP -port $vmData.SSHPort `
			-username $superUser -password $password -download -downloadTo $LogDir -files "*.txt, *.log"
	} catch {
		$ErrorMessage =  $_.Exception.Message
		$ErrorLine = $_.InvocationInfo.ScriptLineNumber
		Write-LogErr "EXCEPTION : $ErrorMessage at line: $ErrorLine"
		$testResult = "FAIL"
	}
	return $testResult
}

Main
